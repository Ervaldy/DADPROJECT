package dadvertx;

import io.netty.handler.codec.mqtt.MqttConnectReturnCode;
import io.netty.handler.codec.mqtt.MqttQoS;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.Promise;
import io.vertx.core.buffer.Buffer;
import io.vertx.mqtt.MqttClient;
import io.vertx.mqtt.MqttClientOptions;
import io.vertx.mqtt.impl.MqttClientImpl;

public class MqttClientVerticle extends AbstractVerticle{
	
	private String ClassInstanceId;
	
	public void start(Promise<Void> promise) {
		ClassInstanceId = this.hashCode() + "";
		MqttClientOptions mqttClientOptions = new MqttClientOptions();
		mqttClientOptions.setAutoKeepAlive(true);
		mqttClientOptions.setAutoGeneratedClientId(false);
		mqttClientOptions.setClientId(ClassInstanceId);
		mqttClientOptions.setConnectTimeout(10000);
		mqttClientOptions.setKeepAliveTimeSeconds(10);
		mqttClientOptions.setReconnectAttempts(10);
		mqttClientOptions.setReconnectInterval(5000);
		mqttClientOptions.setUsername("mqttbroker");
		mqttClientOptions.setPassword("mqttbrokerpass");
		MqttClient mqttClient = new MqttClientImpl(vertx, mqttClientOptions);
		mqttClient.publishHandler(messageReceiveHandler ->{
			System.out.println(messageReceiveHandler.payload().toString());
		});
		mqttClient.connect(1885, "localhost", handler ->{
			
			if(handler.result().code() == MqttConnectReturnCode.CONNECTION_ACCEPTED) {
				mqttClient.subscribe(MqttServerVerticle.TOPIC_MEDICIONES, MqttQoS.AT_LEAST_ONCE.value(),
						handlerSubscribe ->{
							if(handlerSubscribe.succeeded()) {
								System.out.println(ClassInstanceId + " subscribed to " + MqttServerVerticle.TOPIC_MEDICIONES + 
										vertx.setPeriodic(8000, periodic ->{
											String jSon = "{\"id\" :  1}";
											mqttClient.publish(MqttServerVerticle.TOPIC_MEDICIONES, Buffer.buffer(jSon), MqttQoS.AT_LEAST_ONCE, false, true);
										}));
							}else {
								System.out.println(ClassInstanceId + " NOT subscribe to " + MqttServerVerticle.TOPIC_MEDICIONES + "topic");
							}
						});
			}else {
				System.out.println("Error: " + handler.result().code());
			}
			
		});
	}

}
